{"ast":null,"code":"const CONFIG = {\n  url: 'https://cloud.squidex.io/',\n  appName: 'nodoubt223rd',\n  clientId: 'nodoubt223rd:default',\n  clientSecret: 'jrkb8mqbjoltb03t2csxhuxutztvwh8llwdp2h2vq5ox'\n};\n\nfunction getBearerToken() {\n  return localStorage.getItem('token');\n}\n\nfunction setBearerToken(token) {\n  localStorage.setItem('token', token);\n}\n\nfunction clearBearerToken() {\n  localStorage.removeItem('token');\n}\n\nexport async function getPost(id) {\n  const json = await getContent(`api/content/${CONFIG.appName}/posts/${id}`);\n  return parsePost(json);\n}\nexport async function getPage(slug) {\n  const json = await getContent(`api/content/${CONFIG.appName}/pages/?$filter=data/slug/iv eq '${slug}'`);\n  const {\n    items\n  } = json;\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  return parsePage(items[0]);\n}\nexport async function getPosts() {\n  const json = await getContent(`api/content/${CONFIG.appName}/posts`);\n  const {\n    total,\n    items\n  } = json;\n  return {\n    total,\n    posts: items.map(x => parsePost(x))\n  };\n}\nexport async function getPages() {\n  const json = await getContent(`api/content/${CONFIG.appName}/pages`);\n  const {\n    total,\n    items\n  } = json;\n  return {\n    total,\n    pages: items.map(x => parsePage(x))\n  };\n}\n\nfunction parsePost(response) {\n  return {\n    id: response.id,\n    title: response.data.title.iv,\n    text: response.data.text.iv,\n    slug: response.data.slug.iv\n  };\n}\n\nfunction parsePage(response) {\n  return {\n    id: response.id,\n    title: response.data.title.iv,\n    text: response.data.text.iv,\n    slug: response.data.slug.iv\n  };\n}\n\nexport async function fetchBearerToken() {\n  // Check if we have already a bearer token in local store.\n  let token = getBearerToken();\n\n  if (token) {\n    return token;\n  }\n\n  const body = `grant_type=client_credentials&scope=squidex-api&client_id=${CONFIG.clientId}&client_secret=${CONFIG.clientSecret}`; // Get the bearer token. Ensure that we use a client id with readonly permissions.\n\n  const response = await fetch(buildUrl('identity-server/connect/token'), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to retrieve token, got ${response.statusText}`);\n  }\n\n  const json = await response.json();\n  token = json.access_token; // Cache the bearer token in the local store.\n\n  setBearerToken(token);\n  return token;\n}\n\nfunction getContent(url) {\n  return getContentInternal(url, true);\n}\n\nasync function getContentInternal(url, retry) {\n  // Fetch the bearer token.\n  const token = await fetchBearerToken();\n  const response = await fetch(buildUrl(url), {\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    if (response.status === 403 || response.status === 401) {\n      // If we get an error we clear the bearer token and retry the request.\n      clearBearerToken();\n\n      if (retry) {\n        return getContentInternal(url);\n      }\n    }\n\n    throw new Error(`Failed to retrieve content, got ${response.statusText}`);\n  }\n\n  return await response.json();\n}\n\nfunction buildUrl(url) {\n  if (url.length > 0 && url.startsWith('/')) {\n    url = url.substr(1);\n  }\n\n  const result = `${CONFIG.url}/${url}`;\n  return result;\n}","map":{"version":3,"sources":["F:/Websites/nodoubt223rd.com/src/service/index.js"],"names":["CONFIG","url","appName","clientId","clientSecret","getBearerToken","localStorage","getItem","setBearerToken","token","setItem","clearBearerToken","removeItem","getPost","id","json","getContent","parsePost","getPage","slug","items","length","parsePage","getPosts","total","posts","map","x","getPages","pages","response","title","data","iv","text","fetchBearerToken","body","fetch","buildUrl","method","headers","ok","Error","statusText","access_token","getContentInternal","retry","status","startsWith","substr","result"],"mappings":"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","sourcesContent":["const CONFIG = {\r\n    url: 'https://cloud.squidex.io/',\r\n    appName: 'nodoubt223rd',\r\n    clientId: 'nodoubt223rd:default',\r\n    clientSecret: 'jrkb8mqbjoltb03t2csxhuxutztvwh8llwdp2h2vq5ox'\r\n};\r\n\r\nfunction getBearerToken() {\r\n    return localStorage.getItem('token');\r\n}\r\n\r\nfunction setBearerToken(token) {\r\n    localStorage.setItem('token', token);\r\n}\r\n\r\nfunction clearBearerToken() {\r\n    localStorage.removeItem('token');\r\n}\r\n\r\nexport async function getPost(id) {\r\n    const json = await getContent(`api/content/${CONFIG.appName}/posts/${id}`);\r\n\r\n    return parsePost(json);\r\n}\r\n\r\nexport async function getPage(slug) {\r\n    const json = await getContent(`api/content/${CONFIG.appName}/pages/?$filter=data/slug/iv eq '${slug}'`);\r\n\r\n    const { items } = json;\r\n\r\n    if (items.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return parsePage(items[0]);\r\n}\r\n\r\nexport async function getPosts() {\r\n    const json = await getContent(`api/content/${CONFIG.appName}/posts`);\r\n\r\n    const { total, items } = json;\r\n\r\n    return { total, posts: items.map(x => parsePost(x)) };\r\n}\r\n\r\nexport async function getPages() {\r\n    const json = await getContent(`api/content/${CONFIG.appName}/pages`);\r\n\r\n    const { total, items } = json;\r\n\r\n    return { total, pages: items.map(x => parsePage(x)) };\r\n}\r\n\r\nfunction parsePost(response) {\r\n    return {\r\n        id: response.id,\r\n        title: response.data.title.iv,\r\n        text: response.data.text.iv,\r\n        slug: response.data.slug.iv\r\n    };\r\n}\r\n\r\nfunction parsePage(response) {\r\n    return {\r\n        id: response.id,\r\n        title: response.data.title.iv,\r\n        text: response.data.text.iv,\r\n        slug: response.data.slug.iv\r\n    };\r\n}\r\n\r\nexport async function fetchBearerToken() {\r\n    // Check if we have already a bearer token in local store.\r\n    let token = getBearerToken();\r\n\r\n    if (token) {\r\n        return token;\r\n    }\r\n\r\n    const body = `grant_type=client_credentials&scope=squidex-api&client_id=${CONFIG.clientId}&client_secret=${CONFIG.clientSecret}`;\r\n\r\n    // Get the bearer token. Ensure that we use a client id with readonly permissions.\r\n    const response = await fetch(buildUrl('identity-server/connect/token'), { \r\n        method: 'POST', \r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body \r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to retrieve token, got ${response.statusText}`);\r\n    }\r\n\r\n    const json = await response.json();\r\n\r\n    token = json.access_token;\r\n\r\n    // Cache the bearer token in the local store.\r\n    setBearerToken(token);\r\n\r\n    return token;\r\n}\r\n\r\nfunction getContent(url) {\r\n    return getContentInternal(url, true);\r\n}\r\n\r\nasync function getContentInternal(url, retry) {\r\n    // Fetch the bearer token.\r\n    const token = await fetchBearerToken();\r\n\r\n    const response = await fetch(buildUrl(url), {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    });     \r\n\r\n    if (!response.ok) {\r\n        if (response.status === 403 || response.status === 401) {\r\n            // If we get an error we clear the bearer token and retry the request.\r\n            clearBearerToken();\r\n\r\n            if (retry) {\r\n                return getContentInternal(url);\r\n            }\r\n        }\r\n\r\n        throw new Error(`Failed to retrieve content, got ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n}\r\n\r\nfunction buildUrl(url) {\r\n    if (url.length > 0 && url.startsWith('/')) {\r\n        url = url.substr(1);\r\n    }\r\n\r\n    const result = `${CONFIG.url}/${url}`;\r\n\r\n    return result;\r\n}"]},"metadata":{},"sourceType":"module"}